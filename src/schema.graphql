type Bid implements Node {
  _id: ID!
  productId: ID!
  product: CatalogProduct
  updatedAt: DateTime
  createdAt: DateTime
  status: String
  offerBy: ID
  canAccept: ID
  offers: [Offer]
  acceptedOffer: Offer
  shopId: ID!
  createdBy: ID
  createdByinfo: createdByUserinfo
  soldBy: ID
  soldByInfo: createdByUserinfo
}
type Offer implements Node {
  _id: ID!
  amount: Money!
  text: String
  updatedAt: DateTime
  createdAt: DateTime
  sender: createdByUserinfo
  createdBy: ID
  status: String
  reciever: createdByUserinfo
  createdFor: ID
}
extend type Query {
  getBidsbyAccountId: [Bid]
  getBidsbySellerId: [Bid]
  getActiveBidOnProduct(input: activeBidInput): activeBidPayLoad
}
extend type Subscription {
  offer(bidId: ID!): Offer!
}
extend type Mutation {
  placeBidOnProduct(input: placeBidInput): placeBidPayLoad
  sendOffer(input: sendOfferInput): Offer
}
input activeBidInput {
  productId: ID!
  variantId: ID!
}
type activeBidPayLoad  {
  
  offer:Offer
  isValid:Boolean
}
type placeBidPayLoad {
  bidId: ID
}
input placeBidInput {
  shopId: ID!
  productId: ID!
  variantId: ID!
  soldby: ID!
  offer: offerInput!
  offerType: offerTypes!
}
input offerInput {
  amount: MoneyInput!
  text: String
  status: String
}

input sendOfferInput {
  bidId: ID!
  offer: offerInput!
  to: ID!
  type: offerTypes!
}
enum offerTypes {
  text
  counterOffer
  acceptedOffer
  rejectOffer
  game
}
