type Bid implements Node {
  _id: ID!
  productId: ID!
  productSlug:String!
  reactionVariantId:ID!
  product: ProductVariant
  updatedAt: DateTime
  createdAt: DateTime
  status: String
  offerBy: ID
  activeOffer: Offer
  canAccept: ID
  offers: [Offer]
  gameCanAccept: ID
  acceptedGame: Offer
  gameAcceptedAt: DateTime
  gameAcceptedBy: ID
  acceptedOffer: Offer
  shopId: ID!
  createdBy: ID
  createdByinfo: createdByUserinfo
  soldBy: ID
  soldByInfo: createdByUserinfo
}
type Offer implements Node {
  _id: ID!
  amount: Money!
  text: String
  updatedAt: DateTime
  createdAt: DateTime
  sender: createdByUserinfo
  createdBy: ID
  type: offerTypes
  status: String
  reciever: createdByUserinfo
  createdFor: ID
  canAccept: ID
}
extend type Query {
  getBidsbyAccountId: [Bid]
  getBidsbySellerId: [Bid]
  myNotifications: [Notification]
  getActiveBidOnProduct(input: activeBidInput): activeBidPayLoad
  getBidsbyUserId(userId: ID!, isSeller: Boolean!): [Bid]
}
type Notification {
  _id: ID
  details: String
  hasDetails: Boolean
  message: String
  status: notificationStatus
  timeSent: DateTime
  to: ID!
  from:ID
  sender:createdByUserinfo
  type: notificationTypes
  url: String
}
input createNotificationInput {
  details: String
  hasDetails: Boolean!
  message: String!
  to: ID!
  type: notificationTypes!
}

enum notificationTypes {
  bid
  offer
  follow
  newOrder
  orderCanceled
  orderAccepted
}
enum notificationStatus {
  unread
  read
}
extend type Subscription {
  offer(userId: ID!): offerSubscriptionPayload
  newBid(userId: ID!): Bid
  startCoinToss(bidId: ID!): coinTossSubscriptionPayload
  notifications(userId:ID!):Notification
}

type coinTossSubscriptionPayload {
  result: String
  wonBy: ID
  wonByInfo:createdByUserinfo
  lostByInfo:createdByUserinfo
  lostBy: ID
  data: String
  head:ID
  tail:ID
}
type offerSubscriptionPayload {
  offer: Offer!
  offerType: offerTypes!
  bidId: ID
  canAccept: ID
  canAcceptGame: ID
  productId: ID
  variantId: ID
  userId: ID
}
extend type Mutation {
  placeBidOnProduct(input: placeBidInput): placeBidPayLoad
  sendOffer(input: sendOfferInput): Offer
  updateCartOfferPrice(cartId: ID!, bidId: ID!): Cart
  createNotification(input:createNotificationInput):Notification
  markAsRead(notificationId:ID):Notification
}

enum coinTossOptions {
  head
  tail
}
type coinTossResult {
  userSelection: String
  winner: ID
  loser: ID
  acceptedOffer: Offer
}
input activeBidInput {
  productId: ID!
  variantId: ID!
}
type activeBidPayLoad {
  bidId: ID!
  offer: Offer
  isValid: Boolean
}
type placeBidPayLoad {
  bidId: ID
}
input placeBidInput {
  shopId: ID!
  productId: ID!
  variantId: ID!
  soldby: ID!
  offer: offerInput!
  offerType: offerTypes!
}
input offerInput {
  amount: MoneyInput!
  text: String
  status: String
}

input sendOfferInput {
  bidId: ID!
  offer: offerInput!
  to: ID!
  type: offerTypes!
}
enum offerTypes {
  text
  counterOffer
  acceptedOffer
  rejectOffer
  gameRequest
  acceptedGame
  rejectedGame
}
